== 클래스캐스트

  클래스캐스트는 유튜브 수업 영상을 제공하고  평가 도구와 커뮤니티 기능을 갖춘 온라인 공개 수업 도구입니다. 루비온레일즈(이하 레일즈) 프레임웍으로 개발한  클래스캐스트를 이용하여 누구나 교육용 웹 사이트를 빠른 시간에 만들 수 있습니다. 일반적으로 컴퓨터 화면을 녹화해서 공유하는 애플리케이션을 스크린캐스트라고 하는데 교육용 영상 컨텐츠를 공유할 수 있는 웹 애플리케이션이라는 의미로 클래스캐스트라는 이름을 붙였습니다.

== 클래스캐스트 설치하기

  빠르고 손쉽게 웹 애플리케이션을 제작할 수 있다는 장점에도 불구하고 루비온레일즈에 대한 가장 큰 비판은 버전에 따른 호환성이 심각하리만큼 나쁘다는 점입니다. 다른 버전에서 개발한 소스코드는 제대로 실행되지 않는다는 게 문제입니다. 실제 클래스캐스트 개발을 시작하면서 사용한 루비 패키지는 1.8, 레일즈 패키지는 3.2였지만 개발 도중에 루비는 2.0으로 레일즈는 4.0으로 업그레이드되었습니다. 따라서 아무 생각 없이 루비온레일즈 책이나 온라인 튜토리얼을 따라서 레일즈 프레임워크를 설치하면 반드시 문제가 생길 수 밖에 없습니다.

  루비 패키지 버전 관리 도구인 rvm이라는 패키지를 활용하면 정확히 원하는 버전의 패키지를 시스템에 설치할 수 있습니다. 우분투와 같은 데비안 계열 리눅스 시스템(우분투 12)에 루비 1.8.7, 레일즈 3.2.13을 설치해야 합니다.

1. 먼저 rvm을 설치합니다. github에서 직접 코드를 다운로드합니다.
       $ bash < <(curl -sk https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)

2. rvm 명령을 쉘에서 사용할 수 있도록 환경변수 설정 파일 .bash_profile에 다음 스크립트를 입력합니다.
       $ echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function' >> ~/.bash_profile

3. rvm 명령을 바로 실행할 수 있도록 source 명령으로 환경 설정 파일을 다시 읽어들입니다.
       $ source ~/.bash_profile

4. 루비 1.8.7 패키지를 설치합니다. 
       $ rvm install 1.8.7

5. 설치한 루비 1.8.7을 사용하겠다는 명령을 실행합니다.
       $ rvm 1.8.7
       $ rvm --default 1.8.7

6. 이제 루비로 작성한 라이브러리 패키지인 루비젬을 설치합니다. rubygems 1.8을 apt-get 명령으로 설치합니다.
       $ sudo apt-get install rubygems1.8 

7. gem을 이용해서 rails를 설치합니다. 이때 —version을 붙여 레일즈 3.2.13을 설치한다고 명시해야 합니다.
       $ gem install rails --version 3.2.13

8. 시스템에 설치된 루비, 레일즈 패키지 버전을 확인합니다. 루비 1.8, 레일즈 3.2.13이 설치되었나요?
       $ ruby -v
       ruby 1.8.7 (2013-06-27 patchlevel 374) [i686-linux]
       $ rails -v
       Rails 3.2.13

9. 이번에는 데이터베이스와 관련 라이브러리를 설치합니다. 클래스캐스트가 사용하는 sqlite는 MySQL이나 PostgreSQL 보다는 가벼운 DBMS(Database Management System)입니다. sqlite 패키지와 함께 관련 라이브러리(libsqlite3-dev, libsqlite3-ruby)를 함께 설치해야 합니다.
       $ sudo apt-get install sqlite3 libsqlite3-dev libsqlite3-ruby

10. 클래스캐스트의 소스코드는 github에서 관리되고 있습니다. 시스템에 git을 설치하면 소스코드 관리가 쉬워집니다. 먼저 git을 설치하겠습니다.
       $ sudo apt-get install git

11. git을 이용해서 github에 저장된 클래스캐스트 소스코드 저장소를 홈 디렉토리에 복제합니다.
       $ git clone git@github.com:ShinJaehun/ClassCasts.git

12. 홈 디렉토리에 복제한 클래스캐스트 디렉토리로 이동하여 budle install 명령을 실행합니다. 이 명령을 실행하면 클래스캐스트에서 필요한 라이브러리를 자동으로 다운로드하고 시스템에 설치합니다.
       $ cd ClassCasts/
       ~/ClassCasts$ bundle install

13. 데이터베이스를 생성하고 초기 값(seed)을 생성합니다.
       ~/ClassCasts$ rake db:migrate
       ~/ClassCasts$ rake db:seed

14. 다음 명령으로 레일즈 서버를 시작합니다. 레일즈의 기본 웹 서버 WEBrick이 실행되는 것을 확인할 수 있습니다.
       ~/ClassCasts$ rails s

15. 레일즈는 포트 3000번을 사용하기 때문에 웹 브라우저 주소 창에 ‘http://localhost:3000’과 같이 포트를 명시해서 접속가능합니다.

* The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html
* Ruby on Rails Tutorial Book: http://www.railstutorial.org/


== Debugging Rails

Sometimes your application goes wrong. Fortunately there are a lot of tools that
will help you debug it and get it back on the rails.

First area to check is the application log files. Have "tail -f" commands
running on the server.log and development.log. Rails will automatically display
debugging and runtime information to these files. Debugging info will also be
shown in the browser on requests from 127.0.0.1.

You can also log your own messages directly into the log file from your code
using the Ruby logger class from inside your controllers. Example:

  class WeblogController < ActionController::Base
    def destroy
      @weblog = Weblog.find(params[:id])
      @weblog.destroy
      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
    end
  end

The result will be a message in your log file along the lines of:

  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!

More information on how to use the logger is at http://www.ruby-doc.org/core/

Also, Ruby documentation can be found at http://www.ruby-lang.org/. There are
several books available online as well:

* Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)
* Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)

These two books will bring you up to speed on the Ruby language and also on
programming in general.


== Debugger

Debugger support is available through the debugger command when you start your
Mongrel or WEBrick server with --debugger. This means that you can break out of
execution at any point in the code, investigate and change the model, and then,
resume execution! You need to install ruby-debug to run the server in debugging
mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:

  class WeblogController < ActionController::Base
    def index
      @posts = Post.all
      debugger
    end
  end

So the controller will accept the action, run the first line, then present you
with a IRB prompt in the server window. Here you can do things like:

  >> @posts.inspect
  => "[#<Post:0x14a6be8
          @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>,
       #<Post:0x14a6620
          @attributes={"title"=>"Rails", "body"=>"Only ten..", "id"=>"2"}>]"
  >> @posts.first.title = "hello from a debugger"
  => "hello from a debugger"

...and even better, you can examine how your runtime objects actually work:

  >> f = @posts.first
  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
  >> f.
  Display all 152 possibilities? (y or n)

Finally, when you're ready to resume execution, you can enter "cont".


== Console

The console is a Ruby shell, which allows you to interact with your
application's domain model. Here you'll have all parts of the application
configured, just like it is when the application is running. You can inspect
domain models, change values, and save to the database. Starting the script
without arguments will launch it in the development environment.

To start the console, run <tt>rails console</tt> from the application
directory.

Options:

* Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications
  made to the database.
* Passing an environment name as an argument will load the corresponding
  environment. Example: <tt>rails console production</tt>.

To reload your controllers and models after launching the console run
<tt>reload!</tt>

More information about irb can be found at:
link:http://www.rubycentral.org/pickaxe/irb.html


== dbconsole

You can go to the command line of your database directly through <tt>rails
dbconsole</tt>. You would be connected to the database with the credentials
defined in database.yml. Starting the script without arguments will connect you
to the development database. Passing an argument will connect you to a different
database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,
PostgreSQL and SQLite 3.

== Description of Contents

The default directory structure of a generated Ruby on Rails application:

  |-- app
  |   |-- assets
  |   |   |-- images
  |   |   |-- javascripts
  |   |   `-- stylesheets
  |   |-- controllers
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- layouts
  |-- config
  |   |-- environments
  |   |-- initializers
  |   `-- locales
  |-- db
  |-- doc
  |-- lib
  |   |-- assets
  |   `-- tasks
  |-- log
  |-- public
  |-- script
  |-- test
  |   |-- fixtures
  |   |-- functional
  |   |-- integration
  |   |-- performance
  |   `-- unit
  |-- tmp
  |   `-- cache
  |       `-- assets
  `-- vendor
      |-- assets
      |   |-- javascripts
      |   `-- stylesheets
      `-- plugins

app
  Holds all the code that's specific to this particular application.

app/assets
  Contains subdirectories for images, stylesheets, and JavaScript files.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from
  ApplicationController which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb. Models descend from
  ActiveRecord::Base by default.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use
  eRuby syntax by default.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the
  common header/footer method of wrapping views. In your views, define a layout
  using the <tt>layout :default</tt> and create a file named default.html.erb.
  Inside default.html.erb, call <% yield %> to render the view using this
  layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are
  generated for you automatically when using generators for controllers.
  Helpers can be used to wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database,
  and other dependencies.

db
  Contains the database schema in schema.rb. db/migrate contains all the
  sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when
  generated using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that
  doesn't belong under controllers, models, or helpers. This directory is in
  the load path.

public
  The directory available for the web server. Also contains the dispatchers and the
  default HTML files. This should be set as the DOCUMENT_ROOT of your web
  server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the rails generate
  command, template test files will be generated for you and placed in this
  directory.

vendor
  External libraries that the application depends on. Also includes the plugins
  subdirectory. If the app has frozen rails, those gems also go here, under
  vendor/rails/. This directory is in the load path.
